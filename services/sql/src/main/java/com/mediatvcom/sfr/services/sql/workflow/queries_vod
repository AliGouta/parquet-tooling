To join 2v-rx:

/*
Dataset<Row> sqlDF = spark.sql("SELECT ondemand_session_id_2v, count(ondemand_session_id_2v) as number " +
                 "From (" +
                 "SELECT rx.date as date_rx, 2v.date as date_2v, 2v.ondemand_session_id as ondemand_session_id_2v, " +
                 "2v.code_http as code_http_2v, rx.bitrate as bitrate_rx, rx.service_group as service_group_rx, rx.ip_rfgw as ip_rfgw_rx, " +
                 "rx.port_rfgw as port_rfgw_rx, rx.mode as mode_rx " +
                 "FROM srmRessource2v2cModel 2v " +
                 "LEFT JOIN usrm_vermserver_rx rx " +
                 "ON rx.ondemand_session_id = 2v.ondemand_session_id and rx.bitrate is not null " +
                 ") jointure " +
                 "Group BY ondemand_session_id_2v " +
                 "ORDER BY number DESC");
 */

To join 2v-rx-tx:

         Dataset<Row> sqlDF = spark.sql("SELECT ondemand_session_id_2v, count(ondemand_session_id_2v) as number " +
                 "From (" +
                 "SELECT rx.date as date_rx, 2v.date as date_2v, 2v.ondemand_session_id as ondemand_session_id_2v, " +
                 "2v.code_http as code_http_2v, rx.bitrate as bitrate_rx, rx.service_group as service_group_rx, rx.ip_rfgw as ip_rfgw_rx, " +
                 "rx.port_rfgw as port_rfgw_rx, rx.mode as mode_rx " +
                 "FROM srmRessource2v2cModel 2v " +
                 "LEFT JOIN usrm_vermserver_rx rx " +
                 "ON rx.ondemand_session_id = 2v.ondemand_session_id and rx.bitrate is not null " +
                 "LEFT JOIN usrm_vermserver_tx tx " +
                 "ON rx.ondemand_session_id = tx.ondemand_session_id and tx.code != \"teardown_or_ok\"  and tx.code != \"error\"" +
                 ") jointure " +
                 "Group BY ondemand_session_id_2v " +
                 "ORDER BY number DESC");


3v-4v

         Dataset<Row> sqlDF = spark.sql("SELECT sessionId_3v, count(sessionId_3v) as number " +
                 "From( " +
                 "SELECT date as date_3v, " +
                 "session_id as sessionId_3v " +
                 "From srmSessionId3v5cModel 3v " +
                 "LEFT OUTER JOIN 4v " +
                 "ON session_id = 4v.sessionId_4v " +
                 ") jointure " +
                 "GROUP BY sessionId_3v " +
                 "ORDER BY number DESC");

3v-4v-5v

         Dataset<Row> sqlDF = spark.sql("SELECT sessionId_3v, count(sessionId_3v) as number " +
                 "FROM ( " +
                    "SELECT 3v.date as date_3v, " +
                    "3v.session_id as sessionId_3v, 3v.client_id, tsid_4v " +
                    "svcid_4v, content_type_4v, 5v.vip as vip_5v, " +
                    "5v.content_name as content_name_5v, 5v.content_type as content_type_5v " +
                    "From srmSessionId3v5cModel 3v " +
                    "LEFT JOIN 4v " +
                    "ON 3v.session_id = 4v.sessionId_4v " +
                    "LEFT JOIN srmSessionStart5vModel 5v " +
                    "ON 3v.session_id = 5v.session_id " +
                 ") jointure " +
                 "GROUP BY sessionId_3v " +
                 "ORDER BY number DESC").repartition(1);

3v-4v-5v-7v

         Dataset<Row> sqlDF = spark.sql("SELECT sessionId_3v, count(sessionId_3v) as number " +
                 "FROM ( " +
                    "SELECT 3v.date as date_3v, 3v.session_id as sessionId_3v, 3v.client_id, " +
                    "tsid_4v, svcid_4v, content_type_4v, " +
                    "5v.vip as vip_5v, 5v.content_name as content_name_5v, 5v.content_type as content_type_5v, " +
                    "7v.date as date_7v, 7v.session_id as sessionId_7v " +
                    "From srmSessionId3v5cModel 3v " +
                    "LEFT JOIN 4v " +
                    "ON 3v.session_id = 4v.sessionId_4v " +
                    "LEFT JOIN srmSessionStart5vModel 5v " +
                    "ON 3v.session_id = 5v.session_id " +
                    "LEFT JOIN srmEnd7v7cModel 7v " +
                    "ON 3v.session_id = 7v.session_id " +
                 ") jointure " +
                 "GROUP BY sessionId_3v " +
                 "ORDER BY number DESC ");


2v-rx-tx-3a:

Dataset<Row> sqlDF = spark.sql("SELECT rx.date as date_rx, 2v.date as date_2v, 2v.ondemand_session_id as ondemand_session_id_2v, " +
                                  "2v.code_http as code_http_2v, rx.bitrate as bitrate_rx, rx.service_group as service_group_rx, rx.ip_rfgw as ip_rfgw_rx, " +
                                  "rx.port_rfgw as port_rfgw_rx, rx.mode as mode_rx, " +
                                  "strm.date as date_s, strm.streamer as stream_s, strm.content_name as content_name_s," +
                                  "4c.content_type as content_type_c " +
                                  "FROM srmRessource2v2cModel 2v " +
                                  "LEFT JOIN usrm_vermserver_rx rx " +
                                  "ON rx.ondemand_session_id = 2v.ondemand_session_id and rx.bitrate is not null " +
                                  "LEFT JOIN usrm_vermserver_tx tx " +
                                  "ON rx.ondemand_session_id = tx.ondemand_session_id and tx.code != \"teardown_or_ok\"  and tx.code != \"error\" " +
                                  "LEFT JOIN streamerModel strm " +
                                  "ON strm.ip_rfgw = tx.ip_rfgw and strm.port_rfgw = tx.port_rfgw " +
                                  "and (unix_timestamp(strm.date, \"yyyy-MM-dd HH:mm:ss.SSS\") + 7200) >= unix_timestamp(tx.date, \"yyyy/MM/dd HH:mm:ss.SSS\") " +
                                  "and (unix_timestamp(strm.date, \"yyyy-MM-dd HH:mm:ss.SSS\") + 7200) < ( unix_timestamp(tx.date, \"yyyy/MM/dd HH:mm:ss.SSS\") + 30 )" +
                                  "LEFT JOIN srmSessionStart4cModel 4c " +
                                  "ON rx.ondemand_session_id = 4c.control_session " ).repartition(1);


1v-3v-3av-4v-5v-7v
Dataset<Row> sqlDF = spark.sql("SELECT 1v.date as date_1v, " +
                 "3av.date as date_3av, 3av.content_name as content_name_3av, 3av.carteId as carteId_3av, " +
                 "3v.date as date_3v, 3v.session_id as sessionId_3v, 3v.client_id as client_id_3v, " +
                 "tsid_4v, svcid_4v, content_type_4v, " +
                 "5v.vip as vip_5v, 5v.content_name as content_name_5v, 5v.content_type as content_type_5v, " +
                 "7v.date as date_7v, 7v.session_id as sessionId_7v " +
                 "From streamerModel 3av " +
                 "LEFT JOIN srmSessionId3v5cModel 3v " +
                 "ON 3av.cseq = 3v.cseq " +
                 "LEFT JOIN 4v " +
                 "ON 3v.session_id = 4v.sessionId_4v " +
                 "LEFT JOIN srmSessionStart5vModel 5v " +
                 "ON 3v.session_id = 5v.session_id " +
                 "LEFT JOIN srmEnd7v7cModel 7v " +
                 "ON 3v.session_id = 7v.session_id " +
                 "JOIN srmSetup1vModel 1v " +
                 "ON 1v.content_name = 3av.content_name and 1v.carteId = 3av.carteId  " +
                 "and unix_timestamp(3av.date, \"yyyy-MM-dd HH:mm:ss.SSS\") >= unix_timestamp(1v.date, \"yyyy-MM-dd HH:mm:ss,SSS\") " +
                 "and unix_timestamp(3av.date, \"yyyy-MM-dd HH:mm:ss.SSS\") < ( unix_timestamp(1v.date, \"yyyy-MM-dd HH:mm:ss,SSS\") + 60 ) ").repartition(1);


All VoD Workflow:


         Dataset<Row> sqlDF4v = spark.sql("SELECT MIN(date) as date_min_4v, MAX(date) as date_max_4v, " +
                 "4v.session_id as sessionId_4v, " +
                 "tsid as tsid_4v, svcid as svcid_4v, " +
                 "content_type as content_type_4v " +
                 "From srmTunningStartSession4v6v4s6cModel 4v " +
                 "Group by session_id, tsid, svcid, content_type").cache();

         sqlDF4v.createOrReplaceTempView("4v");


         Dataset<Row> sqlcommonDF = spark.sql("SELECT rx.date as date_rx, 2v.date as date_2v, 2v.ondemand_session_id as ondemand_session_id_2v, " +
                 "2v.code_http as code_http_2v, rx.bitrate as bitrate_rx, rx.service_group as service_group_rx, tx.ip_rfgw as ip_rfgw_tx, " +
                 "tx.port_rfgw as port_rfgw_tx, rx.mode as mode_rx " +
                 "FROM srmRessource2v2cModel 2v " +
                 "LEFT JOIN usrm_vermserver_rx rx " +
                 "ON rx.ondemand_session_id = 2v.ondemand_session_id and rx.bitrate is not null " +
                 "LEFT JOIN usrm_vermserver_tx tx " +
                 "ON rx.ondemand_session_id = tx.ondemand_session_id and tx.code != \"teardown_or_ok\"  and tx.code != \"error\" ").cache();

         sqlcommonDF.createOrReplaceTempView("common");

         Dataset<Row> sqlDF = spark.sql("SELECT 1v.date as date_1v, " +
                 "3av.port_rfgw as port_rfgw_3av, 3av.ip_rfgw as ip_rfgw_3av, " +
                 "3av.date as date_3av, 3av.content_name as content_name_3av, 3av.carteId as carteId_3av, " +
                 "3v.date as date_3v, 3v.session_id as sessionId_3v, 3v.client_id as client_id_3v, " +
                 "tsid_4v, svcid_4v, content_type_4v, " +
                 "5v.vip as vip_5v, 5v.content_name as content_name_5v, 5v.content_type as content_type_5v, " +
                 "7v.date as date_7v, 7v.session_id as sessionId_7v, " +
                 "common.port_rfgw_tx as port_rfgw_tx_common, common.ip_rfgw_tx as ip_rfgw_tx_common, common.bitrate_rx as bitrate_rx_common, common.date_rx as date_rx_common " +
                 "From streamerModel 3av " +
                 "LEFT JOIN srmSessionId3v5cModel 3v " +
                 "ON 3av.cseq = 3v.cseq " +
                 "LEFT JOIN 4v " +
                 "ON 3v.session_id = 4v.sessionId_4v " +
                 "LEFT JOIN srmSessionStart5vModel 5v " +
                 "ON 3v.session_id = 5v.session_id " +
                 "LEFT JOIN srmEnd7v7cModel 7v " +
                 "ON 3v.session_id = 7v.session_id " +
                 "JOIN srmSetup1vModel 1v " +
                 "ON 1v.content_name = 3av.content_name and 1v.carteId = 3av.carteId  " +
                 "and unix_timestamp(3av.date, \"yyyy-MM-dd HH:mm:ss.SSS\") >= unix_timestamp(1v.date, \"yyyy-MM-dd HH:mm:ss,SSS\") " +
                 "and unix_timestamp(3av.date, \"yyyy-MM-dd HH:mm:ss.SSS\") < ( unix_timestamp(1v.date, \"yyyy-MM-dd HH:mm:ss,SSS\") + 60 ) " +
                 "LEFT JOIN common " +
                 "ON common.port_rfgw_tx = 3av.port_rfgw and common.ip_rfgw_tx = 3av.ip_rfgw " +
                 "and unix_timestamp(3av.date, \"yyyy-MM-dd HH:mm:ss.SSS\") >= unix_timestamp(common.date_2v, \"yyyy-MM-dd HH:mm:ss.SSS\") " +
                 "and unix_timestamp(3av.date, \"yyyy-MM-dd HH:mm:ss.SSS\") < ( unix_timestamp(common.date_2v, \"yyyy-MM-dd HH:mm:ss.SSS\") + 10 ) ").repartition(1);
