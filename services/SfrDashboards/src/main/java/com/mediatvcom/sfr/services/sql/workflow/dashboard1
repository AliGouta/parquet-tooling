

         /*
         Catchup errors 0c
          */

        Dataset<Row> sql0cerrorDF = spark.sql("SELECT 0c.date as date,  NULL as date_start_video, 0c.content_type as content_type, " +
                "0c.content_name as content_name, NULL as streamer, NULL as bitrate_rx, NULL as service_group, " +
                "NULL as port_rfgw, NULL as ip_rfgw, NULL as client_id, 0c.carteId as carteId, NULL as date_end, " +
                "NULL as sessionId, NULL as mode_rx, 0c.code_http as code_http, NULL as x_srm_error_message, NULL as ondemand_session_id " +
                "FROM srmGetContent0cModel 0c " +
                "WHERE 0c.code_http != \"200 OK\" and to_date(0c.date) = to_date( " + "\"" + dateRange.get(0) + "\"" + " ) ").cache();

        sql0cerrorDF.createOrReplaceTempView("cathup_0c_error");


         /*
         Catchup errors 1c
          */

        Dataset<Row> sql1cerrorDF = spark.sql("SELECT 1c.date as date,  NULL as date_start_video, 1c.content_type as content_type, " +
                "NULL as content_name, NULL as streamer, NULL as bitrate_rx, NULL as service_group, " +
                "NULL as port_rfgw, NULL as ip_rfgw, NULL as client_id, NULL as carteId, NULL as date_end, " +
                "NULL as sessionId, NULL as mode_rx, 1c.code_http as code_http, NULL as x_srm_error_message, NULL as ondemand_session_id " +
                "FROM srmPostContent1cModel 1c " +
                "WHERE 1c.code_http != \"200 OK\" and to_date(1c.date) = to_date( " + "\"" + dateRange.get(0) + "\"" + " ) ").cache();

        sql1cerrorDF.createOrReplaceTempView("cathup_1c_error");

         /*
         VoD & catchup errors
          */

        Dataset<Row> sqlVodCatchuperrorDF = spark.sql("SELECT date_4v as date, NULL as date_start_video,  " +
                "if (content_name_4v rlike '(.+?)controlSession.*', \"catchup\", content_type_1v) as content_type, " +
                "content_name_4v as content_name, " +
                "NULL as streamer, NULL as bitrate_rx, NULL as service_group, NULL as port_rfgw, NULL as ip_rfgw, NULL as client_id, " +
                "carteId_4v as carteId, NULL as date_end, NULL as sessionId, NULL as mode_rx, " +
                "code_http_4v as code_http, x_srm_error_message_4v as x_srm_error_message, NULL as ondemand_session_id " +
                "FROM ( " +
                    "SELECT 1v.date as date_1v, " +
                    "4v.date as date_4v, 4v.code_http as code_http_4v, 4v.x_srm_error_message as x_srm_error_message_4v, 4v.carteId as carteId_4v, " +
                    "4v.content_name as content_name_4v, 1v.content_type as content_type_1v " +
                    "FROM ( " +
                        "SELECT tr4v.date as date, tr4v.code_http as code_http, tr4v.x_srm_error_message as x_srm_error_message, " +
                        "tr4v.carteId as carteId, tr4v.content_name as content_name, tr4v.error as error " +
                        "FROM srmTunningStartSession4V6v6S6CModel tr4v " +
                        "WHERE to_date(tr4v.date) = to_date(  " + "\"" + dateRange.get(0) + "\"" + " ) " +
                    ") 4v " +
                    "LEFT JOIN srmSetup1vModel 1v " +
                    "ON 1v.content_name = 4v.content_name and 1v.carteId = 4v.carteId " +
                    "and unix_timestamp(4v.date, \"yyyy-MM-dd HH:mm:ss.SSS\") >= unix_timestamp(1v.date, \"yyyy-MM-dd HH:mm:ss.SSS\" ) " +
                    "where 4v.error = \"true\" and 4v.content_name rlike '^[A-Z].*' " +
                ") errors " +
                "GROUP BY date_4v, code_http_4v, x_srm_error_message_4v, carteId_4v, content_name_4v, content_type_1v ").cache();

        sqlVodCatchuperrorDF.createOrReplaceTempView("vod_catchup_error");

         /*
         VoD OK
          */

        // , cseq should be removed since it is somtimes set to some value!
        Dataset<Row> sqlDF4v = spark.sql("SELECT MIN(date) as date_min_4v, MAX(date) as date_max_4v, " +
                "4v.session_id as sessionId_4v, " +
                "tsid as tsid_4v, svcid as svcid_4v, " +
                "content_type as content_type_4v " +
                "From srmTunningStartSession4V6v6S6CModel 4v " +
                "Group by session_id, tsid, svcid, content_type ").cache();

        sqlDF4v.createOrReplaceTempView("4v");

        Dataset<Row> sqlcommonDF = spark.sql("SELECT rx.date as date_rx, 2v.date as date_2v, 2v.ondemand_session_id as ondemand_session_id_2v, " +
                "2v.code_http as code_http_2v, rx.bitrate as bitrate_rx, rx.service_group as service_group_rx, tx.ip_rfgw as ip_rfgw_tx, " +
                "tx.port_rfgw as port_rfgw_tx, rx.mode as mode_rx " +
                "FROM ( " +
                    "SELECT tr2v.date as date, tr2v.ondemand_session_id as ondemand_session_id, " +
                    "tr2v.code_http as code_http " +
                    "FROM srmRessource2v2cModel tr2v " +
                    "WHERE to_date(tr2v.date) = to_date( " + "\"" + dateRange.get(0) + "\"" + " ) " +
                ") 2v " +
                "LEFT JOIN usrm_vermserver_rx rx " +
                "ON rx.ondemand_session_id = 2v.ondemand_session_id and rx.bitrate is not null " +
                "LEFT JOIN usrm_vermserver_tx tx " +
                "ON rx.ondemand_session_id = tx.ondemand_session_id and tx.code != \"teardown_or_ok\"  and tx.code != \"error\" ").cache();

        sqlcommonDF.createOrReplaceTempView("common");


        Dataset<Row> sqlDF3a1v = spark.sql("SELECT MAX(1vus.date) as date_1vus, 1vus.content_type as content_type_1vus, 3aus.date as date_3aus, " +
                "3aus.cseq as cseq_3aus, 3aus.client_id as client_id_3aus, 3aus.streamer as streamer_3aus, " +
                "3aus.content_name as content_name_3aus, 3aus.carteId as carteId_3aus " +
                "From ( " +
                    "SELECT tr3aus.date as date, tr3aus.cseq as cseq, tr3aus.client_id as client_id, tr3aus.streamer as streamer, " +
                    "tr3aus.content_name as content_name, tr3aus.carteId as carteId  " +
                    "FROM streamerModel tr3aus " +
                    "WHERE to_date(tr3aus.date) = to_date( " + "\"" + dateRange.get(0) + "\"" + " )" +
                ") 3aus " +
                "JOIN srmSetup1vModel 1vus " +
                "ON 1vus.content_name = 3aus.content_name and 1vus.carteId = 3aus.carteId " +
                "and unix_timestamp(3aus.date, \"yyyy-MM-dd HH:mm:ss.SSSSSS\") >= unix_timestamp(1vus.date, \"yyyy-MM-dd HH:mm:ss.SSS\") " +
                "GROUP BY 3aus.client_id, 3aus.streamer, 3aus.cseq, 3aus.content_name, 3aus.date, 3aus.carteId, 1vus.content_type ").cache();

        sqlDF3a1v.createOrReplaceTempView("3aus1vus");

        Dataset<Row> sqlDF3aCommon = spark.sql("SELECT MAX(common.date_rx) as date_common, 3aus.date as date_3aus, 3aus.client_id as client_id_3aus, " +
                "3aus.ip_rfgw as ip_rfgw_3aus, 3aus.port_rfgw as port_rfgw_3aus, 3aus.content_name as content_name_3aus, " +
                "common.bitrate_rx as bitrate_rx_common, common.service_group_rx as service_group_rx_common, common.mode_rx as mode_rx_3aus " +
                "From ( " +
                    "SELECT tr3aus.date as date, tr3aus.client_id as client_id, " +
                    "tr3aus.ip_rfgw as ip_rfgw, tr3aus.port_rfgw as port_rfgw, tr3aus.content_name as content_name," +
                    "tr3aus.cseq as cseq " +
                    "FROM streamerModel tr3aus " +
                    "WHERE to_date(tr3aus.date) = to_date( " + "\"" + dateRange.get(0) + "\"" + " ) " +
                ") 3aus " +
                "JOIN common " +
                "ON common.port_rfgw_tx = 3aus.port_rfgw and common.ip_rfgw_tx = 3aus.ip_rfgw " +
                "and ( unix_timestamp(3aus.date, \"yyyy-MM-dd HH:mm:ss.SSSSSS\") + 7200 ) >= unix_timestamp(common.date_rx, \"yyyy-MM-dd HH:mm:ss.SSS\")  " +
                "Group by 3aus.client_id, 3aus.cseq, common.bitrate_rx, common.service_group_rx, common.mode_rx, " +
                "3aus.content_name, 3aus.date, 3aus.ip_rfgw, 3aus.port_rfgw ").cache();

        sqlDF3aCommon.createOrReplaceTempView("3auscommon");

        Dataset<Row> sqlSucessVodlDF = spark.sql("SELECT 3aus1vus.date_1vus as date, NULL as date_start_video, 3aus1vus.content_type_1vus as content_type, 3av.content_name as content_name, 3av.streamer as streamer, 3auscommon.bitrate_rx_common as bitrate_rx, " +
                "3auscommon.service_group_rx_common as service_group, 3av.port_rfgw as port_rfgw, 3av.ip_rfgw as ip_rfgw, 3v.client_id as client_id, " +
                "3av.carteId as carteId, 7v.date as date_end, 3v.session_id as sessionId, " +
                "3auscommon.mode_rx_3aus as mode_rx, \"200 OK\" as code_http, NULL as x_srm_error_message, NULL as ondemand_session_id " +
                "From streamerModel 3av " +
                "LEFT JOIN srmSessionId3v5cModel 3v " +
                "ON 3av.cseq = 3v.cseq " +
                "LEFT JOIN 4v " +
                "ON 3v.session_id = 4v.sessionId_4v " +
                "LEFT JOIN srmSessionStart5vModel 5v " +
                "ON 3v.session_id = 5v.session_id " +
                "LEFT JOIN srmEnd7v7cModel 7v " +
                "ON 3v.session_id = 7v.session_id " +
                "JOIN 3aus1vus " +
                "ON 3aus1vus.content_name_3aus = 3av.content_name and 3aus1vus.client_id_3aus = 3av.client_id " +
                "and 3aus1vus.cseq_3aus = 3av.cseq and 3aus1vus.date_3aus = 3av.date " +
                "JOIN 3auscommon " +
                "ON 3auscommon.ip_rfgw_3aus = 3av.ip_rfgw and 3auscommon.port_rfgw_3aus = 3av.port_rfgw " +
                "and 3auscommon.date_3aus = 3av.date ").cache();

        sqlSucessVodlDF.createOrReplaceTempView("vod_sessions_ok");


        Dataset<Row> sqlcatchupDF = spark.sql("SELECT rx.date as date_rx, 2v.date as date_2v, 2v.ondemand_session_id as ondemand_session_id_2v, " +
                "2v.code_http as code_http_2v, rx.bitrate as bitrate_rx, rx.service_group as service_group_rx, rx.ip_rfgw as ip_rfgw_rx, " +
                "rx.port_rfgw as port_rfgw_rx, rx.mode as mode_rx, " +
                "tjoin.date_8c as date_8c_tj, tjoin.content_type as content_type_8c " +
                "FROM ( " +
                    "SELECT tr2v.date as date, tr2v.ondemand_session_id as ondemand_session_id, " +
                    "tr2v.code_http as code_http " +
                    "FROM srmRessource2v2cModel tr2v " +
                    "WHERE to_date(tr2v.date) = to_date( " + "\"" + dateRange.get(0) + "\"" + " ) " +
                ") 2v " +
                "LEFT JOIN usrm_vermserver_rx rx " +
                "ON rx.ondemand_session_id = 2v.ondemand_session_id and rx.bitrate is not null " +
                "LEFT JOIN usrm_vermserver_tx tx " +
                "ON rx.ondemand_session_id = tx.ondemand_session_id and tx.code != \"teardown_or_ok\"  and tx.code != \"error\" " +
                "JOIN ( SELECT Min(8c.date) as date_8c, 8c.ondemand_session_id as ondemand_session_id_8c, content_type " +
                "from srmEnd8cModel 8c " +
                "Group by ondemand_session_id, content_type) tjoin " +
                "ON rx.ondemand_session_id = tjoin.ondemand_session_id_8c ").cache();

        sqlcatchupDF.createOrReplaceTempView("cathup_success_session");

        Dataset<Row> sqlallDF = spark.sql("SELECT catchupok.date_rx as date, 4c.date as date_start_video, content_type_8c as content_type, content_name as content_name, NULL as streamer, " +
                "catchupok.bitrate_rx as bitrate_rx, catchupok.service_group_rx as service_group, " +
                "catchupok.port_rfgw_rx as port_rfgw, catchupok.ip_rfgw_rx as ip_rfgw, " +
                "client_id as client_id, carteId as carteId, date_8c_tj as date_end, NULL as sessionId, catchupok.mode_rx as mode_rx, " +
                "\"200 OK\" as code_http, NULL as x_srm_error_message, catchupok.ondemand_session_id_2v as ondemand_session_id " +
                "FROM cathup_success_session catchupok " +
                "LEFT JOIN srmSessionStart4cModel 4c " +
                "ON 4c.control_session = catchupok.ondemand_session_id_2v " +
                "UNION ALL " +
                "SELECT * " +
                "FROM vod_sessions_ok " +
                "UNION ALL " +
                "SELECT * " +
                "FROM cathup_0c_error " +
                "UNION ALL " +
                "SELECT * " +
                "FROM cathup_1c_error " +
                "UNION ALL " +
                "SELECT * " +
                "FROM vod_catchup_error ").repartition(1);